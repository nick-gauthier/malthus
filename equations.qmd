---
title: "Population dynamics"
format: html
editor: visual
---

```{r}
library(odin)
library(tidyverse)
```

Deterministic logistic

```{r}
# install.packages("drat") # -- if you don't have drat installed
drat:::add("mrc-ide")
install.packages("odin")
remotes::install_github("mrc-ide/odin")

```

```{r}
logistic_ode <- odin::odin({
  deriv(N) <- r * N * (1 - N / K)

  initial(N) <- N0

  N0 <- user(10)
  K <- user(150)
  r <- user(0.01)

}, verbose = FALSE)
```

```{r}
#| echo: FALSE
log_ode_model <- logistic_ode$new()

result_ode <- log_ode_model$run(1:1000) |>
  as_tibble()
# Plotting both deterministic and stochastic

ggplot() +
  geom_line(data = result_ode, aes(x = t, y = N, color = "Deterministic"), alpha = 1) +
  labs(title = "Logistic Growth Simulation",
       x = "Time",
       y = "Population Size",
       color = "Model Type") +
  theme_bw()
```

## Stochastic

```{r}
logistic_stochastic <- odin::odin({
  update(N) <- N + births - deaths
  
  p_N <- b
  p_d <- d * (1 + (N / K))
  
  deaths <- rbinom(N, p_d / dt)
  births <- rbinom(N, p_N  / dt)

  initial(N) <- N0

  K <- user(150)
  b <- user(0.02)
  d <- user(0.01)
  N0 <- user(10)
  dt <- user(1)

}, verbose = FALSE)
```

```{r}
#| echo: FALSE
log_stoch_model <- logistic_stochastic$new()
result_stoch <- log_stoch_model$run(0:1000, replicate = 50)
result_stoch <- log_stoch_model$transform_variables(result_stoch)
result_stoch <- cbind.data.frame(t = result_stoch[[1]], result_stoch[-1]) |>
  pivot_longer(-t)

ggplot() +
  geom_line(data = result_stoch, aes(x = t, y = value, group = name, color = "Stochastic"), alpha = 0.25) +
  scale_color_manual(values = c("Stochastic" = "blue", "Deterministic" = "red")) +
  labs(title = "Logistic Growth Simulation",
       x = "Time",
       y = "Population Size",
       color = "Model Type") +
  theme_bw()
```

## Migration

```{r}
gen <- odin::odin({ 
  deriv(y[]) <- r[i] * y[i] * (1 - y[i]/K[i]) + immigrants[i] - emmigrants[i]
  
  emmigrants[] <- nu * y[i]
  utility[,] <- y[j] ^ alpha * exp(-m[i, j] / beta)
  migrant_balance[] <- sum(utility[i,])
  migrant_flow[,] <-  emmigrants[i] * utility[i,j] / migrant_balance[i]
  immigrants[] <- sum(migrant_flow[, i])

  initial(y[]) <- y0[i]
    
  y0[] <- user()
  r[] <- user()
  m[,] <- user()
  K[] <- user()
  nu <- user(0.05)
  beta <- user(5)
  alpha <- user(1)
  
  dim(K) <- user()
  n <- length(K)
  dim(r) <- n
  dim(y) <- n 
  dim(y0) <- n 
  dim(m) <- c(n, n)
  dim(migrant_balance) <- n
  dim(emmigrants) <- n
  dim(immigrants) <- n
  dim(utility)  <- c(n, n)
  dim(migrant_flow)  <- c(n, n)
})

pars <- list(K = c(150, 50),
  r = c(0.01, 0.02),
             y0 = c(10, 20),
             m = matrix(c(1, 10, 10, 1), nrow = 2))

mod <- gen$new(user = pars)

y <- mod$run(1:500)

y %>%
  as.data.frame() %>%
  pivot_longer(-t) %>%
ggplot(aes(t, value, group = name)) +
  geom_line()
```

```{r}
library(sf)
library(tidygraph)
library(ggraph)
radius <- 5 # radius for each hinterland tile in km
pop_start <- 25 # starting population per settlement
food_start <- 100

hex <- c(40, -69, -40, -69, -80, 0, 
                 -40, 70, 40, 69, 80, 0, 40, -69) %>% # changing one 69 in the top corner to a 70 helps for some reason
  matrix(nrow = 7, byrow = 2) %>%
  list %>%
  st_polygon() %>%
  st_sfc() %>%
  st_sf()

hinterlands <- hex %>%
  st_make_grid(cellsize = radius * sqrt(3), square = FALSE) %>% # st_make_grid wants the short diagonal
  st_sf() %>%
  .[hex,]

n <- nrow(hinterlands)

pts <- hinterlands %>%
  st_centroid() %>%
  st_coordinates()

settlements <- hinterlands %>%
  st_centroid() %>%
  st_distance() %>%
  round(2) %>%
  replace(. == 0, 9999) %>%
  as_tbl_graph() %>%
  mutate(id = 1:n(),
         population = pop_start,
         food = food_start,
         x = pts[,1], 
         y = pts[,2],
         eq = 0) %E>%
  rename(distance = weight) %>%
  mutate(distance = if_else(distance == 9999, radius * 0.5, distance),
         trade_flow = 0,
         migrant_flow = 0) 

dist_mat <- settlements %>% select(distance) %>%
  as_tibble() %>% 
  pivot_wider(names_from = to, values_from = distance) %>%
  column_to_rownames('from') %>%
  as.matrix()
```

```{r}

pars <- list(K = rep(200, 300),
  r = rep(0.01, 300),
             y0 = rep(10, 300),
             m = dist_mat,
  nu = .5,
  beta = 1)

mod <- gen$new(user = pars)

y <- mod$run(1:500)

y %>%
  as.data.frame() %>%
  setNames(c('time', 1:300)) %>%
  pivot_longer(-time, names_to = 'id', names_transform = list(id = as.integer)) %>%
  left_join(as_tibble(settlements, 'nodes'), .) %>%
  filter(time == 500) %>%
  ggplot(aes(x, y, size = value)) +
  geom_point()

  y %>%
      as.data.frame() %>%
      pivot_longer(-t) %>%
      ggplot(aes(t, value, group = name)) +
      geom_line() +
      labs(title = "Population dynamics with migration",
           x = "Time",
           y = "Population size")

```

```{r}
library(miniUI)
getMigrationRate <- function() {
  
  ui <- miniPage(
    gadgetTitleBar("Set Migration Rate"),
    miniContentPanel(
      sliderInput("nu", "Migration rate (nu)", min = 0, max = 1, value = 0.05),
      sliderInput("beta", "friction (beta)", min = 0, max = 30, value = 5),
       sliderInput("alpha", "attractiveness (alpha)", min = .5, max = 2, value = 1),
      plotOutput("plot")
    )
  )
  
  server <- function(input, output, session) {
   
output$plot <- renderPlot({
   pars <- list(K = rep(200, 300),
  r = rep(0.01, 300),
             y0 = rep(10, 300),
             m = dist_mat,
  nu = input$nu,
  beta = input$beta,
  alpha = input$alpha)

mod <- gen$new(user = pars)

y <- mod$run(1:500)

y %>%
  as.data.frame() %>%
  setNames(c('time', 1:300)) %>%
  pivot_longer(-time, names_to = 'id', names_transform = list(id = as.integer)) %>%
  left_join(as_tibble(settlements, 'nodes'), .) %>%
  filter(time == 500) %>%
  ggplot(aes(x, y, size = value)) +
  geom_point() +
  theme_bw() +
  coord_fixed()
    })
  }
  
  runGadget(ui, server)
}

# Use the gadget to get the migration rate
selectedRate <- getMigrationRate()

# The variable selectedRate will contain the value of nu when the gadget is closed.
print(paste("Selected migration rate: ", selectedRate))
```

```{r}
library(gganimate)
an <- y %>%
  as.data.frame() %>%
  setNames(c('time', 1:300)) %>%
  pivot_longer(-time, names_to = 'id', names_transform = list(id = as.integer)) %>%
  left_join(as_tibble(settlements, 'nodes'), .) %>%
  ggplot(aes(x, y, size = value)) +
  geom_point() +
  transition_time(time) +
  theme_bw() +
  coord_fixed()

animate(an)
```

## Stochastic migration

```{r}
stoch_migration <- odin::odin({ 
   update(N[]) <- N[i] + births[i] - deaths[i] + immigrants[i] - emmigrants[i]
  
  p_N <- b
  p_d[] <- d * (1 + (N[i] / K[i]))
  
  deaths[] <- rbinom(N[i], p_d[i])
  births[] <- rbinom(N[i], p_N)
  
  emmigrants[] <- rbinom(N[i] - deaths[i], nu)
  utility[,] <- N[j] ^ alpha * exp(-m[i, j] / beta)
  migrant_balance[] <- sum(utility[i,])
  migrant_prob[,] <-  utility[i,j] / migrant_balance[i]
  migrant_flow[, 1] <- rbinom(emmigrants[i], migrant_prob[i, 1]) 
  migrant_flow[, 2:n_pop] <- rbinom(emmigrants[i] - sum(migrant_flow[i, 1:(j - 1)]), migrant_prob[i, j] / (if (sum(migrant_prob[i, j:n_pop]) > 0) sum(migrant_prob[i, j:n_pop]) else 1 )) # is this [i, i:n_pop] or [i:n_pop, j] ?
#  ah this is divide by zero!
  immigrants[] <- sum(migrant_flow[, i])

  initial(N[]) <- N0[i]
  
  N0[] <- user()
  m[,] <- user()
  K[] <- user()
  b <- user(0.02)
  d <- user(0.01)
  nu <- user(0.05)
  beta <- user(5)
  alpha <- user(1)
  
  dim(K) <- user()
  n_pop <- length(K)
  dim(births) <- n_pop
  dim(deaths) <- n_pop
  dim(N) <- n_pop 
  dim(N0) <- n_pop 
  dim(m) <- c(n_pop, n_pop)
  dim(p_d) <- n_pop
  dim(migrant_balance) <- n_pop
  dim(emmigrants) <- n_pop
  dim(immigrants) <- n_pop
  dim(utility)  <- c(n_pop, n_pop)
  dim(migrant_prob)  <- c(n_pop, n_pop)
  dim(migrant_flow)  <- c(n_pop, n_pop)
})

pars <- list(K = c(150, 50, 50),
             N0 = c(2, 2, 2),
             m = matrix(c(1, 10, 10, 10, 1, 10, 10, 10, 1), nrow = 3))
             #m = matrix(c(1, 10, 10, 1), nrow = 2))

mod <- stoch_migration$new(user = pars)
mod$contents()
y <- mod$run(1:300, replicate = 1)
# need to shape better
    result_stoch <- mod$transform_variables(y)
 cbind.data.frame(t = result_stoch[[1]], result_stoch[-1]) |>
      pivot_longer(-t) %>%
ggplot(aes(t, value, group = name)) +
  geom_line()
```

```{r}
pars <- list(K = rep(200, 300),
             N0 = rep(20, 300),
             m = dist_mat,
             n = 1.15)

mod <- stoch_migration$new(user = pars)
nsim <- 100
y <- mod$run(1:nsim)

y %>%
  as.data.frame() %>%
  setNames(c('time', 1:300)) %>%
  pivot_longer(-time, names_to = 'id', names_transform = list(id = as.integer)) %>%
  left_join(as_tibble(settlements, 'nodes'), .) %>%
  filter(time == nsim) %>%
  ggplot(aes(x, y, size = value)) +
  geom_point() +
  scale_size_area()

  y %>%
      as.data.frame() %>%
      pivot_longer(-step) %>%
      ggplot(aes(step, value, group = name)) +
      geom_line(alpha = 0.1) +
      labs(title = "Population dynamics with migration",
           x = "Time",
           y = "Population size")
```

```{r}
 y %>%
  as.data.frame() %>%
  setNames(c('time', 1:300)) %>%
  pivot_longer(-time, names_to = 'id', names_transform = list(id = as.integer)) %>%
  left_join(as_tibble(settlements, 'nodes'), .) %>%
  ggplot(aes(x, y, size = value)) +
  geom_point() +
  transition_time(time) +
  theme_bw() +
  coord_fixed()
```

```{r}
remotes::install_github('mrc-ide/odin.dust')
library(odin.dust)
gen_stoch <- odin.dust::odin_dust("../R/stoch_mig.R")

dust_model <- gen_stoch$new(pars = pars,
                         time = 1,
                         n_particles = 10L,
                         n_threads = 10L,
                         seed = 1L)
dust_model$state()
dust_model$run(200)
dust::dust_openmp_threads(100, "fix")
dust::dust_openmp_support(check_compile = TRUE)


```

## Age structure

```{r}
logistic_age <- odin::odin({
  initial(N[1]) <- 0  # Initial infant population
  initial(N[2]) <- 5  # Initial juvenile population
  initial(N[3]) <- 10  # Initial adult population
  initial(N[4]) <- 0  # Initial elderly population
  
  beta <- 0.1  # Birth rate for adults
  delta[1] <- 0.04  # High mortality rate for infants
  delta[2] <- 0.005  # Lower mortality rate for juveniles
  delta[3] <- 0.01  # Mortality rate for adults
  delta[4] <- 0.03  # Higher mortality rate for elderly
  
  N_tot <- sum(N)

  delta_adj[] <- delta[i] * (1 + (N_tot / K))
  
  ## Transitions
  # Binomial distribution for births from adults only
  b <- rbinom(N[3], beta)
  
  # Binomial distribution for deaths, for each age group
  d[] <- rbinom(N[i], delta_adj[i])
  
  N_after_death[] <- N[i] - d[i]
  
  ## Aging transitions: Simplified as complete transition between classes yearly
  transition_to_juvenile <- rbinom(N_after_death[1], 1/6)
  transition_to_adult <- rbinom(N_after_death[2], 1/11)
  transition_to_elderly <- rbinom(N_after_death[3], 1/51)
  
  ## Update
  # Update infant population: new births come here
  update(N[1]) <- N_after_death[1] + b - transition_to_juvenile
  
  # Update juvenile population
  update(N[2]) <- N_after_death[2] + transition_to_juvenile - transition_to_adult
  
  # Update adult population
  update(N[3]) <- N_after_death[3] + transition_to_adult - transition_to_elderly
  
  # Update elderly population
  update(N[4]) <- N_after_death[4] + transition_to_elderly

  K <- user(150)
  dim(N) <- 4
  dim(delta) <- 4
  dim(delta_adj) <- 4
  dim(d) <- 4
  dim(N_after_death) <- 4

}, verbose = FALSE)
```

```{r}
#| echo: FALSE
  log_stoch_model <- logistic_age$new(K = 1000)
    result_stoch <- log_stoch_model$run(0:1000, replicate = 1)
    result_stoch <- log_stoch_model$transform_variables(result_stoch)
    result_stoch <- cbind.data.frame(t = result_stoch[[1]], result_stoch[-1]) |>
      pivot_longer(-t)

      ggplot() +
        geom_line(data = result_stoch, aes(x = t, y = value, group = name, color = name), alpha = 0.25) +
        labs(title = "Logistic Growth Simulation",
             x = "Time",
             y = "Population Size",
             color = "Model Type") +
        theme_bw()
```

```{r}
fertility_table <- tibble(
  age = 0:119,
  fertility_rate = c(rep(0, 12), 0.022, 0.022, 0.022, rep(c(0.232, 0.343, 0.367, 0.293, 0.218, 0.216, 0.134), each = 5), rep(0, 70))
)

mortality_table <- tibble(
  age = 0:119,
  mortality_rate = c(0.381, rep(0.063, 4), rep(c(0.013, 0.010, 0.013, 0.016, 0.018, 0.020, 0.022, 0.024, 0.025, 0.033, 0.042, 0.062, 0.084, 0.122, 0.175, 0.254, 0.376, 0.552, 0.816, 1, 1, 1, 1), each = 5))
)


mortality_table
plot(fertility_table)
plot(mortality_table)

```

```{r}
mean(c(.381, .063, .063, .063, .063))
```

```{r}

area <- user(10) # total arable land, ha
yield <- user(13100) # yield, kcal/ha/day
F <- 1 - exp(-H * k * n * phi / area)
H <- user(5) # number of hours most productive age class devotes to ag per day OR ha-days/hour/year
k <- user(0.0944) # workers hours to area cultivated, ha/worker-hour
phi <- user(c(0, 0, 1, 0)) # average age-weighted relative to most productive class

# so n * phi really just needs to be N[3], the adult population
N[3] * H * k / A_max # workable hectares
```

```{r}
# claude
logistic_age_food <- odin::odin({
  config(include) <- "pgamma.cpp"
  # Initial conditions
  initial(N[1]) <- 0  # Initial infant population 
  initial(N[2]) <- 5  # Initial juvenile population
  initial(N[3]) <- 10 # Initial adult population 
  initial(N[4]) <- 0  # Initial elderly population

  # Parameters
  Y <- user(13100) # yield, kcal/ha/day
  Y_CV <- user(0.3)
  #Y_var <- user(0.6) # Yield variation as fraction of base yield
  #phi[] <- user() # Age-specific work capacity (0-1)
  #rho[] <- user() # Age-specific food needs (min rations)
  beta_max <- 0.06  # Maximum birth rate
  delta_base[1] <- 0.04  # High mortality rate for infants
  delta_base[2] <- 0.005  # Lower mortality rate for juveniles
  delta_base[3] <- 0.01  # Mortality rate for adults
  delta_base[4] <- 0.2  # Higher mortality rate for elderly
  
  # Calculate total workers and consumers
  N_tot <- sum(N)
  J <- user(2785) # max kcal/day required by nediest age
  consumption <- N_tot * J # this doesn't yet change food need by age#sum(N * rho)

  # Food production with random variation and land limitation
  A_max <- user(1000) # Maximum arable land
  H <- user(5) # number of hours most productive age class devotes to ag per day OR ha-days/hour/year
  K <- user(0.0944) # workers hours to area cultivated, ha/worker-hour, or is it the area wokred in H hours?
  # H * K should be ha/person/day
  F_cultivated <- 1 - exp(-K * H * N[3] / A_max) # should divide N by 2 if sex specific labor?
  Y_random <- rgamma(1 / (Y_CV^2), Y * (Y_CV^2))
  production <- Y_random * A_max * F_cultivated # Total food production # workers shouldn' be here? it should be area instead right?
  # where do we, if ever, convert to years here? I think its k? or no, that's all just the fraction, its in the Y? hmm idk. oh or maybe its still day, but so is consumption so that's essentially averaged over a year too

  # Food ratio (available/needed)
  E <- production / consumption 
  initial(E_out) <- 1
  # Vital rates responsive to food ratio
  beta <- beta_max * pgamma_cpp(E, 4.579627264, 0.1)
  delta[] <- 1 - ((1 - delta_base[i]) * pgamma_cpp(E, 2, 0.1)) # convert survival to mortality prob
  
  # Update food stores
 # update(F) <- max(0, F + P - food_need)

  # Population dynamics
  b <- rbinom(N[3], beta) # Births from adults # add dt
  d[] <- rbinom(N[i], delta[i]) # Deaths
  N_after_death[] <- N[i] - d[i]

  # Aging transitions
  transition_to_juvenile <- rbinom(N_after_death[1], 1/6)
  transition_to_adult <- rbinom(N_after_death[2], 1/11) 
  transition_to_elderly <- rbinom(N_after_death[3], 1/51)

  # Update populations
  update(N[1]) <- N_after_death[1] + b - transition_to_juvenile
  update(N[2]) <- N_after_death[2] + transition_to_juvenile - transition_to_adult  
  update(N[3]) <- N_after_death[3] + transition_to_adult - transition_to_elderly
  update(N[4]) <- N_after_death[4] + transition_to_elderly
  update(E_out) <- E

  # Dimensions
  dim(N) <- 4
  dim(delta) <- 4 
  dim(delta_base) <- 4
  #dim(phi) <- 4
  #dim(rho) <- 4

  dim(d) <- 4
  dim(N_after_death) <- 4
}, verbose = FALSE)
```

```{r}
pars |>
  filter(between(age, 15,100)) |>
  summarize(mean(mstar), mean(pstar))
```

```{r}
#| echo: FALSE

log_food_model <- logistic_age_food$new()

  result_stoch <- log_food_model$run(0:1000, replicate = 1)
    result_stoch <- log_food_model$transform_variables(result_stoch)
    result_stoch <- cbind.data.frame(t = result_stoch[[1]], result_stoch[-1]) |>
      pivot_longer(-t) #|>
      #filter(name == 'E_out') 

      ggplot() +
        geom_line(data = result_stoch, aes(x = t, y = value, group = name, color = name), alpha = 0.25) +
        labs(title = "Logistic Growth Simulation",
             x = "Time",
             y = "Population Size",
             color = "Model Type") +
        theme_bw()
```

```{r}
logistic_age_food_full <- odin::odin({
  config(include) <- "pgamma.cpp"
  n_age <- user(120) 
  # Initial conditions
  initial(N[]) <- N0[i]

  # Parameters
  Y <- user(13100) # yield, kcal/ha/day
  Y_var <- user(0.3) # Yield variation as fraction of base yield
  phi[] <- user() # Age-specific work capacity (0-1)
  rho[] <- user() # Age-specific food needs (min rations)
  delta_base[] <- user()
  dim(delta_base) <- n_age
  fertility[] <- user()
  dim(fertility) <- n_age
    
  # Calculate total workers and consumers
  workers[] <- N[i] * phi[i]
  dim(workers) <- n_age
  N_workers <- sum(workers)
  J <- user(2785) # max kcal/day required by neediest age
  consumption_by_age[] <- N[i] * J * rho[i]
  dim(consumption_by_age) <- n_age
  consumption <- sum(consumption_by_age)

  # Food production with random variation and land limitation
  A_max <- user(1000) # Maximum arable land
  H <- user(5) # number of hours most productive age class devotes to ag per day OR ha-days/hour/year
  K <- user(0.0944) # workers hours to area cultivated, ha/worker-hour, or is it the area wokred in H hours?
  # H * K should be ha/person/day
  F_cultivated <- 1 - exp(-K * H * N_workers / A_max) # should divide N by 2 if sex specific labor?
    Y_random <- rgamma(1 / (Y_var^2), Y * (Y_var^2))
  production <- Y_random * A_max * F_cultivated # Total food production 

  # Food ratio (available/needed)
  E <- production / consumption 
  #initial(E_out) <- 1
  # Vital rates responsive to food ratio
  fertility_actual[] <- fertility[i] * pgamma_cpp(E, 4.579627264, 0.1)
  delta[] <- 1 - (delta_base[i] * pgamma_cpp(E, survivor_shape[i], 0.1)) # convert survival to mortality prob
  
  # Update food stores
 # update(F) <- max(0, F + P - food_need)

  # Population dynamics
  b_by_age[] <- rbinom(N[i], fertility_actual[i]) # Births from adults # add dt
  b <- sum(b_by_age)
  dim(b_by_age) <- n_age
  d[] <- rbinom(N[i], delta[i]) # Deaths
  N_after_death[] <- N[i] - d[i]

  # Aging transitions
  update(N[1]) <- b
  update(N[2:n_age]) <- N_after_death[i - 1]
  #update(E_out) <- E

  # Dimensions
  dim(N) <- n_age
  dim(delta) <- n_age 
  dim(phi) <- n_age
  dim(rho) <- n_age
  N0[] <- user()
  dim(N0) <- n_age
  dim(fertility_actual) <- n_age
  dim(d) <- n_age
  survivor_shape[] <- user()
  dim(survivor_shape) <- n_age
  dim(N_after_death) <- n_age
}, verbose = FALSE)
```

```{r}
food_limited <- odin.dust::odin_dust({
  # Include external C++ function
  config(include) <- "pgamma.cpp"
  
  # Model dimensions
  n_age <- user(120)
  
  # Initial conditions
  initial(pop[]) <- pop_init[i]
  
  # Production parameters
  yield_base <- user(13100)      # Base yield (kcal/ha/day)
  yield_var <- user(0.3)         # Yield variation as fraction of base yield
  land_max <- user(1000)         # Maximum arable land
  work_hours <- user(5)          # Hours devoted to agriculture per day
  land_per_hour <- user(0.0944)  # Area cultivated per worker-hour (ha/worker-hour)
  cal_max <- user(2785)          # Maximum daily caloric requirement
  set_aside <- user(0.2)         # Yield proportion set aside 
  
  # Age-specific parameters
  work_capacity[] <- user()      # Age-specific work capacity (0-1)
  food_need[] <- user()          # Age-specific relative food needs
  surv_base[] <- user()          # Base survival rates
  fert_base[] <- user()          # Base fertility rates
  pop_init[] <- user()           # Initial population distribution
  surv_shape[] <- user()         # Survival shape parameters
  
  # Set dimensions for age-specific vectors
  dim(work_capacity) <- n_age
  dim(food_need) <- n_age
  dim(surv_base) <- n_age
  dim(fert_base) <- n_age
  dim(pop_init) <- n_age
  dim(surv_shape) <- n_age
  
  # Calculate workforce and consumption
  workers[] <- pop[i] * work_capacity[i]
  dim(workers) <- n_age
  total_workers <- sum(workers)
  
  cal_need[] <- pop[i] * cal_max * food_need[i]
  dim(cal_need) <- n_age
  total_cal_need <- sum(cal_need)
  
  # Food production with stochastic variation and land limitation
  land_used <- 1 - exp(-land_per_hour * work_hours * total_workers / land_max)
  yield_actual <- rgamma(1 / (yield_var^2), yield_base * (yield_var^2))
  food_prod <- yield_actual * land_max * land_used * (1 - set_aside)
  
  # Food availability ratio
  food_ratio <- food_prod / total_cal_need
  surplus <- food_prod - total_cal_need
  
  # Wage equivalent (per worker)
  #wage_equiv <- if (total_workers > 0) food_prod / (total_workers * cal_max) else 0
  
  # Vital rates responsive to food ratio
  fert_actual[] <- fert_base[i] * pgamma_cpp(food_ratio, 4.579627264, 0.1)
  mort_rate[] <- 1 - (surv_base[i] * pgamma_cpp(food_ratio, surv_shape[i], 0.1))
  
  # Population dynamics
  births_by_age[] <- rbinom(pop[i], fert_actual[i])
  total_births <- sum(births_by_age)
  deaths[] <- rbinom(pop[i], mort_rate[i])
  pop_surviving[] <- pop[i] - deaths[i]
  
  # Set dimensions for dynamic variables
  dim(births_by_age) <- n_age
  dim(mort_rate) <- n_age
  dim(fert_actual) <- n_age
  dim(deaths) <- n_age
  dim(pop_surviving) <- n_age
  dim(pop) <- n_age
  
  # Update equations
  update(pop[1]) <- total_births
  update(pop[2:n_age]) <- pop_surviving[i - 1]
  update(food_ratio_out) <- food_ratio
  update(surplus_out) <- surplus
  update(delta_N) <- total_births - sum(deaths)
  initial(surplus_out) <- 0
  initial(delta_N) <- 0
  initial(food_ratio_out) <- 1
  
}, verbose = FALSE)
```

things not yet considered – storage, spoilage, seed reserves, tax/tithe, not working every day, sex divisions in labor, fallow

```{r}
library(tidyverse)
n_particles <- 500
years <- 600

pars <- read_csv('../../Models/spacelim-master/demog_vectors.csv') |>
  mutate(age = 0:119)

n_age <- 120

par_list <- list(
  pop_init = c(rep(0,20), 20, rep(0, 99)),
  fert_base = pars$mstar,
  surv_shape = pars$mortparms,
  surv_base = pars$pstar,
  work_capacity = pars$phi,
  food_need = pars$rho,
  area_max = 6500, # or 65km2, one of my hexes with 5km side
  n_age = 120,
  yield_base = 21000,#7000,
  work_hours = 8 , # 8 but divide by 2 for only working 180 days a year?
  land_per_hour = 0.08,
  yield_var = 0.3,
  set_aside = 0)

mod <- food_limited$new(
  pars = par_list,
  time = 1L,
  n_particles = n_particles,
  seed = 6L
)


state <- mod$simulate(1:years) |> 
  array(dim = c(n_age+3, n_particles, years), 
        dimnames = list(age = c('surplus', 'delta_N', 'e', 1:n_age),  # might not be exactly correct
                        rep = 1:n_particles, 
                        time = 1:years)) |>
  cubelyr::as.tbl_cube(met_name = 'value') |>  
  as_tibble()

state |> 
  filter(!(age %in% c('e', 'surplus', 'delta_N')))|>
  group_by(rep, time) |>
  summarize(N = sum(value)) |>
ggplot(aes(time, N, group = rep)) +
  geom_line(alpha = .1) +
  labs(
    title = "Stochastic Population Simulation",
    x = "Time (years)",
    y = "Population"
  ) +
  theme_bw()

state |> 
  filter(!(age %in% c('e', 'surplus', 'delta_N')))|>
  mutate(age_group = cut(as.numeric(age),
    breaks = c(0, 4, 14, 64, Inf),
    labels = c("0-4", "5-14", "15-64", "65+"),
    right = FALSE  # Makes intervals [0,5), [5,15), etc.
  )) |>
  group_by(rep, time, age_group) |>
  summarize(N = sum(value)) |>
ggplot(aes(time, N, group = interaction(rep, age_group), color = age_group)) +
  geom_line(alpha = .1) +
  #facet_wrap(~age_group) +
  labs(
    title = "Stochastic Population Simulation",
    x = "Time (years)",
    y = "Population"
  ) +
  theme_bw()
```

```{r}
state |>
  filter(!(age %in% c('e', 'surplus', 'delta_N')))|>
  mutate(workers = between(as.numeric(age), 15, 65)) |>
  group_by(rep, time, workers) |>
  summarize(value = sum(value)) |>
  pivot_wider(names_from = workers) |>
  mutate(dependency_ratio = `FALSE` / `TRUE`) |>
  ggplot(aes(time, dependency_ratio, group = rep)) +
  geom_line(alpha = 0.3) +
  theme_bw()
  
```

```{r}
state |>
  filter(age == 'e') |>
  filter(time > 1) |>
  ggplot(aes(time, value)) +
  geom_line(aes(group = rep), alpha = 0.1) +
  geom_smooth() +
  geom_hline(yintercept = 1, color = 'red', linetype = 2) +
  theme_bw()
```

```{r}
state |>
  filter(age == 'e') |>
  filter(time > 400) |>
  ggplot(aes(value)) +
  geom_histogram()
```

```{r}
state |>
  filter(age == 'e') |>
  filter(value < 1) |>
  group_by(rep) |>
  filter(time == min(time)) |>
  ungroup() |>
  ggplot(aes(time)) +
  geom_histogram() +
  theme_bw()

state |>
  filter(age == 'e') |>
  filter(value <= .67) |>
  group_by(rep) |>
  filter(time == min(time)) |>
  ungroup() |>
  ggplot(aes(time)) +
  geom_histogram() +
  theme_bw()
```

```{r}
state |>
  filter(age == 'surplus') |>
  filter(time > 1) |>
  ggplot(aes(time, value)) +
  geom_line(aes(group = rep), alpha = 0.1) +
  geom_hline(yintercept = 1, color = 'red', linetype = 2) +
  geom_smooth() +
  labs(y = 'Surplus food') +
  theme_bw()
```

```{r}
state |>
  filter(age == 'surplus') |>
  group_by(rep) |>
  filter(value == max(value)) |>
  ggplot(aes(time)) +
  geom_histogram() +
  theme_bw()
```

```{r}
state |>
  filter(age == 'delta_N') |>
  filter(time > 1) |>
  ggplot(aes(time, value)) +
  geom_line(aes(group = rep), alpha = 0.1) +
  geom_hline(yintercept = 0, color = 'red', linetype = 2) +
  geom_smooth() +
  theme_bw()
```

```{r}
state |>
  filter(age == 'delta_N') |>
  group_by(rep) |>
  filter(value == max(value)) |>
  ggplot(aes(time)) +
  geom_histogram() +
  theme_bw()
```

```{r}
max_vals <- state |>
  filter(age %in% c('surplus', 'delta_N')) |>
  group_by(rep, age) |>
  filter(value == max(value)) |>
  ungroup()

e_vals <- state |>
  filter(age == 'e') |>
  filter(value < 1) |>
  group_by(rep) |>
  filter(time == min(time)) |>
  ungroup()

bind_rows(max_vals, e_vals) |>
ggplot(aes(time, fill = age)) +
  geom_histogram(alpha = 0.5, binwidth = 5, position = 'identity') +
  theme_bw()
```

```{r}
state |>
  filter(age == 'e') |>
  mutate(phase = if_else(value >= 1, 'copial', if_else(value >= .68, 'transitional', 'malthusian'))) |>
  group_by(rep, phase) |>
  filter(time == min(time)) |>
  ungroup() |>
  filter(phase != 'copial') |>
  ggplot(aes(time, fill = phase)) +
  geom_histogram(position = 'identity', alpha = 0.5) +
  theme_bw()
```

```{r}
max_vals |>
  filter(age == 'surplus') |>
  select(rep, time) |>
  rename(surplus_max = time) |>
  left_join(e_vals) |>
  select(rep, surplus_max, transition = time) |>
  mutate(range = transition - surplus_max) |>
ggplot(aes(range)) +
  geom_histogram(bins = 10) +
  theme_bw()
```

```{r}
state |>
  filter(age %in% c('e', 'surplus', 'delta_N')) |>
  ggplot(aes(time, value, color = age)) +
  geom_smooth() +
  facet_wrap(~age, scales = 'free_y', ncol = 1) +
  theme_bw()
```

```{r}
library(patchwork)
state |>
  filter(age == 'e') |>
  ggplot(aes(time, value, color = age)) +
  geom_smooth() +
  geom_hline(aes(yintercept = 1), color = 'red', linetype = 2) +
  theme_bw() +
  labs(y = 'Food Ratio')
```

```{r}
state |>
  filter(!(age %in% c('e', 'surplus', 'delta_N')))|>
  group_by(rep, time) |>
  summarize(N = sum(value)) |>
  mutate(growth_rate = N - lag(N))  |>
  ggplot(aes(time, growth_rate)) +
  geom_line(alpha = 0.1, aes(group = rep)) +
  geom_smooth() +
  theme_bw()
```

```{r}
plot(pars$mortparms)
plot(pars$mstar)
plot(pars$pstar)
plot(pars$m0)
plot(pars$p0)
```

```{r}
(1 - pgamma(.5, pars$mortparms, scale = 0.1)) |> plot()

pgamma(seq(0,1.2, 0.01), pars$mortparms[1], scale = 0.1) |> plot()
```

```{r}
expand_grid(age = 0:100, e = seq(0, 1.2, 0.01)) |>
  left_join(pars) |>
  mutate(elasticity = pgamma(e, mortparms, scale = 0.1)) |>
  ggplot(aes(e, elasticity, group = age, color = age)) +
  scale_color_viridis_c() +
  geom_line()

expand_grid(age = 0:100, e = seq(0, 1.2, 0.01)) |>
  left_join(pars) |>
  mutate(elasticity = pgamma(e, pars$fertparm[[1]], scale = 0.1)) |>
  ggplot(aes(e, elasticity, group = age, color = age)) +
  scale_color_viridis_c() +
  geom_line()

expand_grid(age = 0:100, e = seq(0, 1.2, 0.01)) |>
  left_join(pars) |>
  mutate(elasticity = pgamma(e, pars$fertparm[[1]], scale = 0.1),
         fertility = mstar * elasticity) |>
  ggplot(aes(e, fertility, group = age, color = age)) +
  scale_color_viridis_c() +
  geom_line()

expand_grid(age = 0:100, e = seq(0, 1.2, 0.01)) |>
  left_join(pars) |>
  mutate(elasticity = pgamma(e, mortparms, scale = 0.1),
         survival = pstar * elasticity) |>
  ggplot(aes(e, survival, group = age, color = age)) +
  scale_color_viridis_c() +
  geom_line()
```

```{r}
expand_grid(age = 0:100, e = seq(0, 1.2, 0.01)) |>
  left_join(pars) |>
  mutate(elasticity = pgamma(e, mortparms, scale = 0.1),
         survival = pstar * elasticity) |>
  ggplot(aes(e, survival, group = age, color = age)) +
  scale_color_viridis_c() +
  geom_line()

expand_grid(age = 0:100, e = seq(0, 1.2, 0.01)) |>
  left_join(pars) |>
  mutate(elasticity = pgamma(e, mortparms, scale = 0.1),
         survival = pstar * elasticity) |>
  ggplot(aes(e, 1 - survival, group = age, color = age)) +
  scale_color_viridis_c() +
  geom_line()
```
